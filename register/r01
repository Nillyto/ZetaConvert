project/
‚îú‚îÄ‚îÄ main.py                  # FastAPI app, rutas, l√≥gica principal
‚îú‚îÄ‚îÄ engines/
‚îÇ   ‚îú‚îÄ‚îÄ image_engine.py      # Motor im√°genes (JPG, PNG, WEBP, PDF, GIF‚Ä¶)
‚îÇ   ‚îî‚îÄ‚îÄ pdf_engine.py        # Motor PDFs (p√°ginas a imagen, comprimir, split/merge futuro)
‚îú‚îÄ‚îÄ static/
‚îÇ   ‚îú‚îÄ‚îÄ css/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ styles.css       # Estilos (modo claro/oscuro, tokens, componentes, dropzone/cola)
‚îÇ   ‚îú‚îÄ‚îÄ js/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ main.js          # Frontend: DnD, colas, progreso, filtros din√°micos
‚îÇ   ‚îú‚îÄ‚îÄ formats.map.json     # Cat√°logo maestro de formatos y targets
‚îÇ   ‚îú‚îÄ‚îÄ formats.status.json  # Habilitados o no (enabled true/false)
‚îÇ   ‚îî‚îÄ‚îÄ icons/               # PWA e √≠conos UI (192, 512, SVGs)
‚îú‚îÄ‚îÄ templates/
‚îÇ   ‚îú‚îÄ‚îÄ base.html            # Layout base con header/footer + theme
‚îÇ   ‚îú‚îÄ‚îÄ home.html            # P√°gina inicial (buscador, tabs, cards)
‚îÇ   ‚îú‚îÄ‚îÄ route.html           # Convertidor individual (dropzone + cola multiarchivo)
‚îÇ   ‚îú‚îÄ‚îÄ privacy.html         # Pol√≠tica de privacidad
‚îÇ   ‚îî‚îÄ‚îÄ terms.html           # T√©rminos de uso
‚îú‚îÄ‚îÄ tmp/                     # Archivos temporales de conversi√≥n (se borra al descargar/cron)
‚îú‚îÄ‚îÄ tests/                   # Tests unitarios y de API (pytest)
‚îî‚îÄ‚îÄ .github/workflows/       # CI (lint, tests, build)


üß© main.py (resumen t√©cnico)

FastAPI con middleware:

CORS (seg√∫n ALLOWED_ORIGINS)

Limite de tama√±o (revisar content-length y validar manualmente)

Rate limit simple por IP (depende de lib que uses o MemoryStore propio)

Static: montado en /static + endpoints SEO (/sitemap.xml, /robots.txt, /ads.txt, /manifest.webmanifest)

Templates con Jinja2.

Rutas:

GET / ‚Üí home.html

GET /routes ‚Üí listado de ROUTES

GET /r/{slug} ‚Üí route.html (inyecta all_targets_json, target_to_slug_json, route.exts_from, route.exts_to)

GET /formats.json ‚Üí dataset simple para buscador { items: [...] }

POST /api/convert ‚Üí conversi√≥n (multipart/form-data)

GET /healthz ‚Üí 200 OK

ROUTES: cat√°logo server-side para p√°ginas de conversi√≥n (cada una con slug, title, desc, category, exts_from, exts_to, accept, multi).

üîå Contrato de la API
POST /api/convert

Request (multipart/form-data)

route: string (slug de la ruta actual, p. ej. jpg-to-png)

target: string (ext destino; p. ej. png)

file o files[]: file (uno o varios si la ruta admite multi)

Opcionales (seg√∫n motores)

quality (int 50‚Äì100) ‚Äî compresi√≥n JPG/WEBP

dpi (int 72‚Äì300) ‚Äî raster PDF‚Üíimagen

pages (string) ‚Äî rango tipo 1-3,5

resize_w/resize_h (int) ‚Äî si >0 se aplica resize

stripmeta (bool 0/1) ‚Äî quitar metadatos

Response

200 OK con Content-Type din√°mico (image/png, application/pdf, application/zip, ‚Ä¶)

Content-Disposition: attachment; filename="nombre_salida.ext"

Cuerpo: archivo convertido (blob)

Errores

400 par√°metros inv√°lidos (json {"error":"...","code":"BAD_REQUEST"})

413 archivo demasiado grande

415 formato no soportado

429 rate limit

500 error interno

Nota: Para multi-p√°gina (PDF‚Üíim√°genes m√∫ltiples), devolver ZIP. Para multi-archivo input ‚Üí ZIP consolidado.

üìò Esquemas de datos (JSON)
static/formats.map.json (cat√°logo maestro)
{
  "categories": {
    "images": [
      { "id": "fmt_jpg", "ext": "jpg", "label": "JPEG", "mime": "image/jpeg", "targets": ["fmt_png","fmt_webp"], "premium": false },
      { "id": "fmt_png", "ext": "png", "label": "PNG",  "mime": "image/png",  "targets": ["fmt_jpg","fmt_webp"] }
    ],
    "documents": [
      { "id": "fmt_pdf", "ext": "pdf", "label": "PDF", "mime": "application/pdf", "targets": ["fmt_png","fmt_jpg","fmt_webp","fmt_zip"] }
    ]
  }
}

static/formats.status.json (habilitados)
{
  "status": [
    { "id": "fmt_jpg", "enabled": true },
    { "id": "fmt_png", "enabled": true },
    { "id": "fmt_webp","enabled": true },
    { "id": "fmt_pdf", "enabled": true },
    { "id": "fmt_zip", "enabled": true }
  ]
}

GET /formats.json (para buscador)
{
  "items": [
    {
      "slug": "jpg-to-png",
      "title": "JPG a PNG",
      "desc": "Convierte fotos JPG a PNG sin p√©rdida",
      "category": "imagenes",
      "from": ["jpg"],
      "to": ["png","webp"],
      "keywords": ["foto","transparencia","raster"]
    }
  ]
}

üñº engines/
image_engine.py

Entradas: PIL.Image / bytes.

Operaciones:

Convertir entre JPG/PNG/WEBP.

quality (JPG/WEBP), stripmeta, resize.

Exportar a PDF (single-image PDF) si lo activ√°s.

Salida: bytes + mime + filename.

pdf_engine.py

Entradas: bytes PDF.

Operaciones:

Raster a PNG/JPG/WEBP con dpi y pages.

Si varias p√°ginas ‚Üí ZIP (mantener orden).

Salida: bytes + mime + filename (o zip).

Contrato interno (retorno t√≠pico):

return {
  "content": bytes_data,
  "mime": "image/png",
  "filename": suggested_name  # ej: base + ".png" / ".zip"
}

üé® Frontend (resumen)

Tema: window.ZCTheme maneja light/dark con localStorage. √çconos SVG se vuelven blancos en dark usando mask-image + currentColor.

Buscador (home + header): carga formats.json (sin cache), filtra y navega.

Tabs: imagenes/video/3d/documentos con ARIA.

Dropzone + cola (route):

DnD y file picker.

Lista de items con: nombre, tama√±o, select target por √≠tem, progreso interno, descarga por √≠tem.

Panel general con formato global, Convertir todo, Descargar todo (se habilita cuando todos terminaron).

XMLHttpRequest para progreso (upload) + finalizaci√≥n (100%).

Redirecci√≥n por slug si el target pertenece a otro conversor.

üîí Seguridad

Validaci√≥n de extensi√≥n y MIME en backend (no te f√≠es del frontend).

L√≠mites:

Tama√±o total por request (p. ej. 20 MB) ‚Üí 413.

Cantidad de archivos (p. ej. 25) ‚Üí 400.

Sandbox: no ejecutes binarios peligrosos sin aislamiento.

Limpiar tmp/ tras entregar el archivo (o CRON cada N minutos).

Rate-limit IP ‚Üí 429.

CORS: restringir dominios en prod.

Headers: X-Content-Type-Options: nosniff, Content-Security-Policy b√°sica (sin unsafe-inline si es posible).

PDF: si usas renderizadores, evitar ejecuci√≥n de JS embebido en PDF (usar raster seguro).

üß™ Tests

Unitarios (tests/engines_test.py):

image_engine: convierte JPG‚ÜíPNG/WEBP, respeta quality, resize, stripmeta.

pdf_engine: PDF‚ÜíPNG (p√°ginas y DPI), ZIP m√∫ltiple.

API (tests/api_test.py):

POST /api/convert happy path y errores (415, 413, 400).

Nombre de archivo por Content-Disposition.

Frontend (opc.): Playwright para DnD + progreso visible + descarga habilitada.

Ejecutar:

pytest -q

ü§ñ CI/CD (sugerido)

GitHub Actions:

Job 1: Lint (ruff/flake8), black --check, isort --check.

Job 2: Tests (pytest).

Job 3: Build Docker (si aplica) y push a registry.

Deploy:

Contenedor con uvicorn detr√°s de nginx (sirve est√°ticos con cach√© agresiva y ?v=).

Healthcheck GET /healthz.

üìà Observabilidad

Logging estructurado (json) en main.py.
Campos: request_id, ip, route, target, size, status, elapsed_ms, error_code.

M√©tricas (opc.): Prometheus (/metrics) con:

convert_requests_total{route,target,status}

convert_latency_ms_bucket

bytes_in_total, bytes_out_total

Sentry o similar para excepciones.

‚ôø Accesibilidad

Controles con aria-label, role="listbox", aria-expanded.

Dropzone con tabindex="0" y disparar click al Enter/Espacio.

Contraste alto en dark (tokens ajustados).

skip-link al <main>.

Focus visible (usa --ring).

üîç SEO

title, meta description, Open Graph, Twitter cards.

canonical, sitemap.xml, robots.txt.

HowTo JSON-LD en route.html.

Performance: preconnect a fonts, fetchpriority="high" para logo, defer/async en JS, ?v= para cache-busting.

üåê i18n (opcional)

lang="es" en <html>.

Preparar alias es, en con bloques Jinja si se requiere (no implementado a√∫n).

üß≠ Convenciones / estilo

Python: snake_case, tipado opcional, docstrings.

JS: m√≥dulos simples IIFE, const/let, helpers $, $$.

CSS: tokens en :root y html.dark; componentes con prefijos (.dz-, .qi-).

Nombres de rutas: from-to (p. ej. jpg-to-png).

Extensiones en min√∫scula; target siempre lowercase en backend.

üßπ Limpieza de temporales

Inmediata: al responder con StreamingResponse, borrar archivo temporal tras finalizar.

CRON: script que borra en tmp/ todo > N minutos.

Evitar colisiones de nombres (usa UUID).

üó∫Ô∏è Roadmap corto

 ZIP de ‚ÄúDescargar todo‚Äù en cliente (JSZip) o servidor.

 Soporte HEIC/AVIF (lib extra).

 ‚ÄúCombinar PDF‚Äù + ‚ÄúDividir PDF‚Äù.

 Lote paralelo con pool configurable (hoy XHR por √≠tem).

 Persistir cola si recarga la p√°gina (IndexedDB).

 Modo ‚Äúp√∫blico/privado‚Äù de logs con anonimizaci√≥n.

‚úÖ Checklist de entrega

Backend

 POST /api/convert valida route + target contra formats.map.json + formats.status.json.

 L√≠mite de tama√±o y tipo MIME.

 Content-Disposition con nombre coherente.

 Limpieza de tmp/.

Frontend

 Dropzone clara (rojo pastel), CTA ‚ÄúSolt√°/toc√°‚Äù.

 Cola: nombre, tama√±o, target por archivo, progreso, descarga.

 Panel general: target global, Convertir todo, Descargar todo (solo cuando todos done).

 Redirecci√≥n por slug si cambia de conversor.

Ops

 CI: lint + tests verdes.

 Deploy con cach√© est√°ticos + ?v=STYLE_VERSION.

 Logs √∫tiles + healthcheck.

üìé Ejemplos de respuesta de conversi√≥n

Single salida (PNG)

HTTP/1.1 200 OK
Content-Type: image/png
Content-Disposition: attachment; filename="foto.png"
Cache-Control: no-store


<binary>

M√∫ltiples salidas (ZIP)

HTTP/1.1 200 OK
Content-Type: application/zip
Content-Disposition: attachment; filename="documento_paginas.zip"


<binary>